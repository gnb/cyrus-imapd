#include <sys/types.h>
#include "cunit/cunit.h"
#include "xmalloc.h"
#include "util.h"
#include "charset.h"

/* The Unicode Replacement character 0xfffd in UTF-8 encoding */
#define UTF8_REPLACEMENT    "\357\277\275"

static void test_lookupname(void)
{
    int cs, cs2;

    /* us-ascii must exist */
    cs = charset_lookupname("us-ascii");
    CU_ASSERT(cs >= 0);

    /* names are case-insensitive */
    cs2 = charset_lookupname("US-ASCII");
    CU_ASSERT(cs2 >= 0);
    CU_ASSERT_EQUAL(cs, cs2);

    cs2 = charset_lookupname("Us-AsCiI");
    CU_ASSERT(cs2 >= 0);
    CU_ASSERT_EQUAL(cs, cs2);

    /* some others must also exist */
    cs = charset_lookupname("utf-8");
    CU_ASSERT(cs >= 0);

    cs = charset_lookupname("utf-7");
    CU_ASSERT(cs >= 0);

    cs = charset_lookupname("iso-8859-1");
    CU_ASSERT(cs >= 0);
}

static void test_to_utf8(void)
{
    int cs;
    char *s;
    static const char ASCII_1[] = "Hello World";
    static const char ASCII_2[] = "Hello W\370rld";
    static const char UTF8_2[] = "Hello W" UTF8_REPLACEMENT "rld";
    static const char BASE64_3[] = "SGVsbG8gV29ybGQ=";
    static const char QP_4[] =
"If you believe that truth=3Dbeauty, then surely=20=\r\n"
"mathematics is the most beautiful branch of philosophy.\r\n";
    static const char ASCII_4[] =
"If you believe that truth=beauty, then surely "
"mathematics is the most beautiful branch of philosophy.\r\n";

    cs = charset_lookupname("us-ascii");
    CU_ASSERT(cs >= 0);

    /* zero length input */
    s = charset_to_utf8("", 0, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, "");
    free(s);

    /* invalid encoding */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1), cs, 0xdeadbeef);
    CU_ASSERT_PTR_NULL(s);

    /* invalid charset */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1), 0xdeadbeef, ENCODING_NONE);
    CU_ASSERT_PTR_NULL(s);

    /* simple ASCII string */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1)-1, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_1);
    free(s);

    /* ASCII string with an invalid character */
    s = charset_to_utf8(ASCII_2, sizeof(ASCII_2)-1, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, UTF8_2);
    free(s);

    /* base64 encoding */
    s = charset_to_utf8(BASE64_3, sizeof(BASE64_3)-1, cs, ENCODING_BASE64);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_1);
    free(s);

    /* Quoted-printable encoding */
    s = charset_to_utf8(QP_4, sizeof(QP_4)-1, cs, ENCODING_QP);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_4);
    free(s);
}

static void test_decode_mimeheader(void)
{
    char *s;
    static const char ASCII_1[] = "Lorem IPSUM dolor \t \t  sit amet";
    static const char SEARCH_1[] = "LOREM IPSUM DOLOR SIT AMET";
    static const char ASCII_B64_2[] = "Lorem =?us-ascii?q?ipsum?= dolor "
				      "=?US-ASCII?Q?sit amet?=";
    static const char ASCII_B64_3[] = "Lorem =?iso-8859-1?q?ips=fcm?= \t"
				      "DOLOR =?iso-8859-1?Q?s=eft am=ebt?=";
    static const char SEARCH_3[] = "LOREM IPSUM DOLOR SIT AMET";
    static const char SEARCH_3b[] = "LOREM IPSÜM DOLOR SÏT AMËT";
    static const char SEARCH_3c[] = "LOREMIPSUMDOLORSITAMET";
    static const char SEARCH_3d[] = "LOREMIPSÜMDOLORSÏTAMËT";
    static const char SEARCH_3e[] = "LOREM IPSÜM  DOLOR SÏT AMËT";
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */

    s = charset_decode_mimeheader(NULL, flags);
    CU_ASSERT_PTR_NULL(s);
    free(s);

    s = charset_decode_mimeheader("", flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, "");
    free(s);

    s = charset_decode_mimeheader(ASCII_1, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_1);
    free(s);

    s = charset_decode_mimeheader(ASCII_B64_2, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_1);
    free(s);

    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3);
    free(s);

    flags = CHARSET_MERGESPACE;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3b);
    free(s);

    flags = CHARSET_SKIPSPACE | CHARSET_SKIPDIACRIT;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3c);
    free(s);

    flags = CHARSET_SKIPSPACE;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3d);
    free(s);

    flags = 0;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3e);
    free(s);
}

static void test_search_mimeheader(void)
{
    char *s;
    comp_pat *pat;
    static const char SUBJECT_CP1252[] = "=?Cp1252?Q?Herzlichen_Gl=FCckwunsch,_der_Artikel_Canon_Ob?= "
				         "=?Cp1252?Q?jektiv_EF-S_18-55_mm_1:3,5-5,6_geh=F6rt_Ihnen!?=";
    static const char SEARCH_CP1252[] = "Herzlichen";
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */

    s = charset_convert(SEARCH_CP1252, 0, flags);
    pat = charset_compilepat(s);
    CU_ASSERT(charset_search_mimeheader(s, pat, SUBJECT_CP1252, flags));
    charset_freepat(pat);
    free(s);
}

static void test_rfc5051(void)
{
    /* Example: codepoint U+01C4 (LATIN CAPITAL LETTER DZ WITH CARON)
     * has a titlecase property of U+01C5 (LATIN CAPITAL LETTER D
     * WITH SMALL LETTER Z WITH CARON).  Codepoint U+01C5 has a
     * decomposition property of U+0044 (LATIN CAPITAL LETTER D)
     * U+017E (LATIN SMALL LETTER Z WITH CARON).  U+017E has a
     * decomposition property of U+007A (LATIN SMALL LETTER Z) U+030c
     */
    char *s;
    static const char STR_RFC5051[] = {0xc7, 0x84, 0};
    static const char RES_RFC5051[] = {'D', 'z', 0xcc, 0x8c, 0};
    int flags = 0; /* super complient */

    s = charset_convert(STR_RFC5051, charset_lookupname("utf-8"), flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, RES_RFC5051);
    free(s);
}

struct test_receiver {
    search_text_receiver_t super;
    int ncalls;
    struct buf out;
};

static void begin_message(search_text_receiver_t *rx
			      __attribute__((unused)),
			  uint32_t uid __attribute__((unused)))
{
    CU_FAIL("begin_message() should not be called here");
}

static void begin_part(search_text_receiver_t *rx
			      __attribute__((unused)),
		       int part __attribute__((unused)))
{
    CU_FAIL("begin_part() should not be called here");
}

static void append_text(search_text_receiver_t *rx,
			const struct buf *text)
{
    struct test_receiver *tr = (struct test_receiver *)rx;

    tr->ncalls++;
    buf_append(&tr->out, text);
}

static void end_part(search_text_receiver_t *rx
			      __attribute__((unused)),
		     int part __attribute__((unused)))
{
    CU_FAIL("end_part() should not be called here");
}

static void end_message(search_text_receiver_t *rx
			      __attribute__((unused)),
			uint32_t uid __attribute__((unused)))
{
    CU_FAIL("end_message() should not be called here");
}

#define TESTCASE(in, cs, enc, st, exp) \
    { \
	static const char _in[] = (in); \
	static int _cs = (cs); \
	int _enc = (enc); \
	static const char _st[] = (st); \
	static const char _exp[] = (exp); \
	struct buf bin = BUF_INITIALIZER; \
	struct test_receiver tr; \
	int r; \
 \
	memset(&tr, 0, sizeof(tr)); \
	tr.super.begin_message = begin_message; \
	tr.super.begin_part = begin_part; \
	tr.super.append_text = append_text; \
	tr.super.end_part = end_part; \
	tr.super.end_message = end_message; \
 \
	buf_init_ro(&bin, _in, sizeof(_in)-1); \
 \
	r = charset_extract(&tr.super, &bin, _cs, _enc, _st, flags); \
	CU_ASSERT_EQUAL(r, 1); \
	CU_ASSERT_EQUAL(tr.ncalls, 1); \
	CU_ASSERT_STRING_EQUAL(buf_cstring(&tr.out), _exp); \
 \
	buf_free(&bin); \
	buf_free(&tr.out); \
    }

static void test_extract(void)
{
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */
    /* data thanks to hipsteripsum.me */

    /* simplest case - no space, plain text is capitalised */
    TESTCASE("freegan", 0, ENCODING_NONE, "PLAIN", "FREEGAN");

    /* capitalised text is still capitalised */
    TESTCASE("FANNY PACK", 0, ENCODING_NONE, "PLAIN", "FANNY PACK");

    /* single spaces become single spaces */
    TESTCASE("before they sold out",
	     0, ENCODING_NONE, "PLAIN",
	     "BEFORE THEY SOLD OUT");

    /* multiple spaces are squashed to a single spaces */
    TESTCASE("you    probably \t haven't\r\nheard\t\r\tof them",
	     0, ENCODING_NONE, "PLAIN",
	     "YOU PROBABLY HAVEN'T HEARD OF THEM");

    /* HTML: correctly formed balanced tag pairs */
    TESTCASE("<bold>Photo</bold> <em>booth</em>",
	0, ENCODING_NONE, "HTML",
	"PHOTO BOOTH");

    /* HTML: unbalanced tags */
    TESTCASE("<bold>American<bold> <bold>Apparel</bold>",
	0, ENCODING_NONE, "HTML",
	"AMERICAN APPAREL");

    /* HTML: OMITTAG tags with and without end tags */
    TESTCASE("<hr>Terry<hr> <hr>Richardson</hr>",
	0, ENCODING_NONE, "HTML",
	"TERRY RICHARDSON");

    /* HTML: quoted tag parameters */
    TESTCASE("<a href=\"foo.html\">leggings</a> <img src\"beer.jpg\">gastropub",
	0, ENCODING_NONE, "HTML",
	"LEGGINGS GASTROPUB");

    /* HTML: unquoted tag parameters */
    TESTCASE("<a href=foo.html>biodiesel</a> <img srcbeer.jpg>seitan",
	0, ENCODING_NONE, "HTML",
	"BIODIESEL SEITAN");

    /* HTML: contents of SCRIPT tag */
    TESTCASE("viral <script>bicycle rights</script>readymade",
	0, ENCODING_NONE, "HTML",
	"VIRAL READYMADE");

    /* HTML: HTML4 SCRIPT tag with no contents */
    TESTCASE("cardigan <script type=\"text/javascript\" "
	     "src=\"truffaut.js\"></script>williamsburg",
	0, ENCODING_NONE, "HTML",
	"CARDIGAN WILLIAMSBURG");

    /* HTML: XHTML SCRIPT empty-element-tag */
    TESTCASE("brunch <script type=\"text/javascript\" "
	     "src=\"cred.js\"/>shoreditch",
	0, ENCODING_NONE, "HTML",
	"BRUNCH SHOREDITCH");

    /* HTML: contents of STYLE tag */
    TESTCASE("pickled <style>whatever tumblr</style>stumptown",
	0, ENCODING_NONE, "HTML",
	"PICKLED STUMPTOWN");

    /* HTML: comments */
    TESTCASE("pinterest <!-- master cleanse -->forage",
	0, ENCODING_NONE, "HTML",
	"PINTEREST FORAGE");

    /* HTML: simple entities */
    TESTCASE("&dquot;Twee &amp; Keytar&dquot; &lt;dreamcatcher@umami.org&gt;",
	0, ENCODING_NONE, "HTML",
	"\"TWEE & KEYTAR\" <DREAMCATCHER@UMAMI.ORG>");

    /* HTML: naked & is emitted */
    TESTCASE("gentrify&<bold>sartorial</bold>",
	0, ENCODING_NONE, "HTML",
	"GENTRIFY&SARTORIAL");

    /* HTML: but, non-zero length unterminated entities are stripped */
    TESTCASE("tattooed&amp locavore",
	0, ENCODING_NONE, "HTML",
	"TATTOOED LOCAVORE");
}
#undef TESTCASE

/* vim: set ft=c: */
